/* tslint:disable */
/* eslint-disable */
/**
 * Chrysalis Service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ICreatePostRequestDTO
 */
export interface ICreatePostRequestDTO {
    /**
     * Name of the author.
     * @type {string}
     * @memberof ICreatePostRequestDTO
     */
    'author': string;
    /**
     * Title of the post.
     * @type {string}
     * @memberof ICreatePostRequestDTO
     */
    'title': string;
    /**
     * Summary of the post.
     * @type {string}
     * @memberof ICreatePostRequestDTO
     */
    'summary': string;
    /**
     * Content of the post.
     * @type {string}
     * @memberof ICreatePostRequestDTO
     */
    'content': string;
    /**
     * URL of the post thumbnail.
     * @type {string}
     * @memberof ICreatePostRequestDTO
     */
    'thumbnail': string;
}
/**
 * 
 * @export
 * @interface ICreateUserRequestDTO
 */
export interface ICreateUserRequestDTO {
    /**
     * User name.
     * @type {string}
     * @memberof ICreateUserRequestDTO
     */
    'username': string;
    /**
     * User email.
     * @type {string}
     * @memberof ICreateUserRequestDTO
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface IPostDTO
 */
export interface IPostDTO {
    /**
     * Post id.
     * @type {string}
     * @memberof IPostDTO
     */
    'id': string;
    /**
     * Name of the author.
     * @type {string}
     * @memberof IPostDTO
     */
    'author': string;
    /**
     * Title of the post.
     * @type {string}
     * @memberof IPostDTO
     */
    'title': string;
    /**
     * Summary of the post.
     * @type {string}
     * @memberof IPostDTO
     */
    'summary': string;
    /**
     * Content of the post.
     * @type {string}
     * @memberof IPostDTO
     */
    'content': string;
    /**
     * URL of the post thumbnail.
     * @type {string}
     * @memberof IPostDTO
     */
    'thumbnail': string;
    /**
     * Post creation date.
     * @type {string}
     * @memberof IPostDTO
     */
    'createdAt': string;
    /**
     * Post update date.
     * @type {string}
     * @memberof IPostDTO
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface IUpdatePostRequestDTO
 */
export interface IUpdatePostRequestDTO {
    /**
     * Title of the post.
     * @type {string}
     * @memberof IUpdatePostRequestDTO
     */
    'title': string;
    /**
     * Summary of the post.
     * @type {string}
     * @memberof IUpdatePostRequestDTO
     */
    'summary': string;
    /**
     * Content of the post.
     * @type {string}
     * @memberof IUpdatePostRequestDTO
     */
    'content': string;
    /**
     * URL of the post thumbnail.
     * @type {string}
     * @memberof IUpdatePostRequestDTO
     */
    'thumbnail': string;
}
/**
 * 
 * @export
 * @interface IUpdateUsernameRequestDTO
 */
export interface IUpdateUsernameRequestDTO {
    /**
     * User name.
     * @type {string}
     * @memberof IUpdateUsernameRequestDTO
     */
    'username': string;
}
/**
 * 
 * @export
 * @interface IUserDTO
 */
export interface IUserDTO {
    /**
     * User id.
     * @type {string}
     * @memberof IUserDTO
     */
    'id': string;
    /**
     * User name.
     * @type {string}
     * @memberof IUserDTO
     */
    'username': string;
    /**
     * User email.
     * @type {string}
     * @memberof IUserDTO
     */
    'email': string;
    /**
     * 
     * @type {IUserRoleEnum}
     * @memberof IUserDTO
     */
    'role': IUserRoleEnum;
    /**
     * User creation date.
     * @type {string}
     * @memberof IUserDTO
     */
    'createdAt': string;
    /**
     * User update date.
     * @type {string}
     * @memberof IUserDTO
     */
    'updatedAt': string;
}


/**
 * User role.
 * @export
 * @enum {string}
 */

export const IUserRoleEnum = {
    Admin: 'ADMIN',
    Default: 'DEFAULT'
} as const;

export type IUserRoleEnum = typeof IUserRoleEnum[keyof typeof IUserRoleEnum];



/**
 * HealthCheckApi - axios parameter creator
 * @export
 */
export const HealthCheckApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Check service health.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkHealth: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/chrysalis/health-check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthCheckApi - functional programming interface
 * @export
 */
export const HealthCheckApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HealthCheckApiAxiosParamCreator(configuration)
    return {
        /**
         * Check service health.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkHealth(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkHealth(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthCheckApi.checkHealth']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HealthCheckApi - factory interface
 * @export
 */
export const HealthCheckApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HealthCheckApiFp(configuration)
    return {
        /**
         * Check service health.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkHealth(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.checkHealth(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HealthCheckApi - object-oriented interface
 * @export
 * @class HealthCheckApi
 * @extends {BaseAPI}
 */
export class HealthCheckApi extends BaseAPI {
    /**
     * Check service health.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthCheckApi
     */
    public checkHealth(options?: RawAxiosRequestConfig) {
        return HealthCheckApiFp(this.configuration).checkHealth(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PostApi - axios parameter creator
 * @export
 */
export const PostApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new post.
         * @param {ICreatePostRequestDTO} iCreatePostRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPost: async (iCreatePostRequestDTO: ICreatePostRequestDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iCreatePostRequestDTO' is not null or undefined
            assertParamExists('createPost', 'iCreatePostRequestDTO', iCreatePostRequestDTO)
            const localVarPath = `/chrysalis/post`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iCreatePostRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete post by id.
         * @param {string} id Post id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePostByID: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePostByID', 'id', id)
            const localVarPath = `/chrysalis/post/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get post by id.
         * @param {string} id Post id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostByID: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPostByID', 'id', id)
            const localVarPath = `/chrysalis/post/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update post by id.
         * @param {string} id Post id.
         * @param {IUpdatePostRequestDTO} iUpdatePostRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePostByID: async (id: string, iUpdatePostRequestDTO: IUpdatePostRequestDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updatePostByID', 'id', id)
            // verify required parameter 'iUpdatePostRequestDTO' is not null or undefined
            assertParamExists('updatePostByID', 'iUpdatePostRequestDTO', iUpdatePostRequestDTO)
            const localVarPath = `/chrysalis/post/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iUpdatePostRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PostApi - functional programming interface
 * @export
 */
export const PostApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PostApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new post.
         * @param {ICreatePostRequestDTO} iCreatePostRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPost(iCreatePostRequestDTO: ICreatePostRequestDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IPostDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPost(iCreatePostRequestDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PostApi.createPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete post by id.
         * @param {string} id Post id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePostByID(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePostByID(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PostApi.deletePostByID']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get post by id.
         * @param {string} id Post id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPostByID(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IPostDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPostByID(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PostApi.getPostByID']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update post by id.
         * @param {string} id Post id.
         * @param {IUpdatePostRequestDTO} iUpdatePostRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePostByID(id: string, iUpdatePostRequestDTO: IUpdatePostRequestDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IPostDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePostByID(id, iUpdatePostRequestDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PostApi.updatePostByID']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PostApi - factory interface
 * @export
 */
export const PostApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PostApiFp(configuration)
    return {
        /**
         * Create a new post.
         * @param {ICreatePostRequestDTO} iCreatePostRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPost(iCreatePostRequestDTO: ICreatePostRequestDTO, options?: RawAxiosRequestConfig): AxiosPromise<IPostDTO> {
            return localVarFp.createPost(iCreatePostRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete post by id.
         * @param {string} id Post id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePostByID(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePostByID(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get post by id.
         * @param {string} id Post id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostByID(id: string, options?: RawAxiosRequestConfig): AxiosPromise<IPostDTO> {
            return localVarFp.getPostByID(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update post by id.
         * @param {string} id Post id.
         * @param {IUpdatePostRequestDTO} iUpdatePostRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePostByID(id: string, iUpdatePostRequestDTO: IUpdatePostRequestDTO, options?: RawAxiosRequestConfig): AxiosPromise<IPostDTO> {
            return localVarFp.updatePostByID(id, iUpdatePostRequestDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PostApi - object-oriented interface
 * @export
 * @class PostApi
 * @extends {BaseAPI}
 */
export class PostApi extends BaseAPI {
    /**
     * Create a new post.
     * @param {ICreatePostRequestDTO} iCreatePostRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    public createPost(iCreatePostRequestDTO: ICreatePostRequestDTO, options?: RawAxiosRequestConfig) {
        return PostApiFp(this.configuration).createPost(iCreatePostRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete post by id.
     * @param {string} id Post id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    public deletePostByID(id: string, options?: RawAxiosRequestConfig) {
        return PostApiFp(this.configuration).deletePostByID(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get post by id.
     * @param {string} id Post id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    public getPostByID(id: string, options?: RawAxiosRequestConfig) {
        return PostApiFp(this.configuration).getPostByID(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update post by id.
     * @param {string} id Post id.
     * @param {IUpdatePostRequestDTO} iUpdatePostRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    public updatePostByID(id: string, iUpdatePostRequestDTO: IUpdatePostRequestDTO, options?: RawAxiosRequestConfig) {
        return PostApiFp(this.configuration).updatePostByID(id, iUpdatePostRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new user.
         * @param {ICreateUserRequestDTO} iCreateUserRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (iCreateUserRequestDTO: ICreateUserRequestDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iCreateUserRequestDTO' is not null or undefined
            assertParamExists('createUser', 'iCreateUserRequestDTO', iCreateUserRequestDTO)
            const localVarPath = `/chrysalis/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iCreateUserRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete user by id.
         * @param {string} id User id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserByID: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteUserByID', 'id', id)
            const localVarPath = `/chrysalis/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get user by id.
         * @param {string} id User id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUser', 'id', id)
            const localVarPath = `/chrysalis/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get user by email.
         * @param {string} email User email.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByEmail: async (email: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('getUserByEmail', 'email', email)
            const localVarPath = `/chrysalis/user/email/{email}`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update username by id.
         * @param {string} id User id.
         * @param {IUpdateUsernameRequestDTO} iUpdateUsernameRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsernameByID: async (id: string, iUpdateUsernameRequestDTO: IUpdateUsernameRequestDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateUsernameByID', 'id', id)
            // verify required parameter 'iUpdateUsernameRequestDTO' is not null or undefined
            assertParamExists('updateUsernameByID', 'iUpdateUsernameRequestDTO', iUpdateUsernameRequestDTO)
            const localVarPath = `/chrysalis/user/{id}/username`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iUpdateUsernameRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new user.
         * @param {ICreateUserRequestDTO} iCreateUserRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(iCreateUserRequestDTO: ICreateUserRequestDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IUserDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(iCreateUserRequestDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.createUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete user by id.
         * @param {string} id User id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserByID(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserByID(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.deleteUserByID']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get user by id.
         * @param {string} id User id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IUserDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.getUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get user by email.
         * @param {string} email User email.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserByEmail(email: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IUserDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserByEmail(email, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.getUserByEmail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update username by id.
         * @param {string} id User id.
         * @param {IUpdateUsernameRequestDTO} iUpdateUsernameRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUsernameByID(id: string, iUpdateUsernameRequestDTO: IUpdateUsernameRequestDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IUserDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUsernameByID(id, iUpdateUsernameRequestDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.updateUsernameByID']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * Create a new user.
         * @param {ICreateUserRequestDTO} iCreateUserRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(iCreateUserRequestDTO: ICreateUserRequestDTO, options?: RawAxiosRequestConfig): AxiosPromise<IUserDTO> {
            return localVarFp.createUser(iCreateUserRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete user by id.
         * @param {string} id User id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserByID(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteUserByID(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get user by id.
         * @param {string} id User id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(id: string, options?: RawAxiosRequestConfig): AxiosPromise<IUserDTO> {
            return localVarFp.getUser(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get user by email.
         * @param {string} email User email.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByEmail(email: string, options?: RawAxiosRequestConfig): AxiosPromise<IUserDTO> {
            return localVarFp.getUserByEmail(email, options).then((request) => request(axios, basePath));
        },
        /**
         * Update username by id.
         * @param {string} id User id.
         * @param {IUpdateUsernameRequestDTO} iUpdateUsernameRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsernameByID(id: string, iUpdateUsernameRequestDTO: IUpdateUsernameRequestDTO, options?: RawAxiosRequestConfig): AxiosPromise<IUserDTO> {
            return localVarFp.updateUsernameByID(id, iUpdateUsernameRequestDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * Create a new user.
     * @param {ICreateUserRequestDTO} iCreateUserRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public createUser(iCreateUserRequestDTO: ICreateUserRequestDTO, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).createUser(iCreateUserRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete user by id.
     * @param {string} id User id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public deleteUserByID(id: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).deleteUserByID(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get user by id.
     * @param {string} id User id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUser(id: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).getUser(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get user by email.
     * @param {string} email User email.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserByEmail(email: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).getUserByEmail(email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update username by id.
     * @param {string} id User id.
     * @param {IUpdateUsernameRequestDTO} iUpdateUsernameRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public updateUsernameByID(id: string, iUpdateUsernameRequestDTO: IUpdateUsernameRequestDTO, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).updateUsernameByID(id, iUpdateUsernameRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



