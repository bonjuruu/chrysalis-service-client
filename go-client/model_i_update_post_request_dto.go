/*
Chrysalis Service API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IUpdatePostRequestDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IUpdatePostRequestDTO{}

// IUpdatePostRequestDTO struct for IUpdatePostRequestDTO
type IUpdatePostRequestDTO struct {
	// Title of the post.
	Title string `json:"title"`
	// Summary of the post.
	Summary string `json:"summary"`
	// Content of the post.
	Content string `json:"content"`
	// URL of the post thumbnail.
	Thumbnail string `json:"thumbnail"`
}

type _IUpdatePostRequestDTO IUpdatePostRequestDTO

// NewIUpdatePostRequestDTO instantiates a new IUpdatePostRequestDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIUpdatePostRequestDTO(title string, summary string, content string, thumbnail string) *IUpdatePostRequestDTO {
	this := IUpdatePostRequestDTO{}
	this.Title = title
	this.Summary = summary
	this.Content = content
	this.Thumbnail = thumbnail
	return &this
}

// NewIUpdatePostRequestDTOWithDefaults instantiates a new IUpdatePostRequestDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIUpdatePostRequestDTOWithDefaults() *IUpdatePostRequestDTO {
	this := IUpdatePostRequestDTO{}
	return &this
}

// GetTitle returns the Title field value
func (o *IUpdatePostRequestDTO) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *IUpdatePostRequestDTO) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *IUpdatePostRequestDTO) SetTitle(v string) {
	o.Title = v
}

// GetSummary returns the Summary field value
func (o *IUpdatePostRequestDTO) GetSummary() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value
// and a boolean to check if the value has been set.
func (o *IUpdatePostRequestDTO) GetSummaryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Summary, true
}

// SetSummary sets field value
func (o *IUpdatePostRequestDTO) SetSummary(v string) {
	o.Summary = v
}

// GetContent returns the Content field value
func (o *IUpdatePostRequestDTO) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *IUpdatePostRequestDTO) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *IUpdatePostRequestDTO) SetContent(v string) {
	o.Content = v
}

// GetThumbnail returns the Thumbnail field value
func (o *IUpdatePostRequestDTO) GetThumbnail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Thumbnail
}

// GetThumbnailOk returns a tuple with the Thumbnail field value
// and a boolean to check if the value has been set.
func (o *IUpdatePostRequestDTO) GetThumbnailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Thumbnail, true
}

// SetThumbnail sets field value
func (o *IUpdatePostRequestDTO) SetThumbnail(v string) {
	o.Thumbnail = v
}

func (o IUpdatePostRequestDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IUpdatePostRequestDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["title"] = o.Title
	toSerialize["summary"] = o.Summary
	toSerialize["content"] = o.Content
	toSerialize["thumbnail"] = o.Thumbnail
	return toSerialize, nil
}

func (o *IUpdatePostRequestDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"title",
		"summary",
		"content",
		"thumbnail",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIUpdatePostRequestDTO := _IUpdatePostRequestDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIUpdatePostRequestDTO)

	if err != nil {
		return err
	}

	*o = IUpdatePostRequestDTO(varIUpdatePostRequestDTO)

	return err
}

type NullableIUpdatePostRequestDTO struct {
	value *IUpdatePostRequestDTO
	isSet bool
}

func (v NullableIUpdatePostRequestDTO) Get() *IUpdatePostRequestDTO {
	return v.value
}

func (v *NullableIUpdatePostRequestDTO) Set(val *IUpdatePostRequestDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableIUpdatePostRequestDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableIUpdatePostRequestDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIUpdatePostRequestDTO(val *IUpdatePostRequestDTO) *NullableIUpdatePostRequestDTO {
	return &NullableIUpdatePostRequestDTO{value: val, isSet: true}
}

func (v NullableIUpdatePostRequestDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIUpdatePostRequestDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


